// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced User management with Zoho integration
model User {
  id                  String   @id @default(cuid())
  email               String   @unique @db.VarChar(255)
  name                String?  @db.VarChar(255)
  role                Role     @default(USER)
  avatar              String?  @db.VarChar(500)
  
  // Zoho Integration Fields
  contactId           String?  @unique @db.VarChar(100) // Zoho CRM Contact ID
  accountId           String?  @db.VarChar(100) // Zoho CRM Account ID
  userRole            UserRole @default(CLIENT_USER)
  clientDashboardId   String?  @unique @db.VarChar(100) // Custom unique identifier
  zohoRefreshToken    String?  @db.Text // Encrypted OAuth token
  preferences         Json     @default("{}")
  lastLogin           DateTime?
  deletedAt           DateTime? // Soft delete support
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blogPosts     BlogPost[]
  auditLogs     AuditLog[]
  notifications Notification[]
  
  @@index([email])
  @@index([contactId])
  @@index([userRole])
  @@index([lastLogin])
  @@map("users")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

// Enhanced RBAC Roles
enum UserRole {
  CLIENT_USER
  CLIENT_ADMIN
  INTERNAL_ENGINEER
  INTERNAL_PM
  ADMIN
}

// Contact form submissions
model Contact {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  subject   String?  @db.VarChar(500)
  message   String   @db.Text
  phone     String?  @db.VarChar(50)
  company   String?  @db.VarChar(255)
  status    ContactStatus @default(PENDING)
  deletedAt DateTime? // Soft delete support
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("contacts")
}

enum ContactStatus {
  PENDING
  RESPONDED
  CLOSED
}

// Consultation requests
model Consultation {
  id                     String   @id @default(cuid())
  name                   String
  email                  String
  company                String
  phone                  String?
  serviceType            String
  projectDescription     String
  timeline               String
  budget                 String
  preferredContactMethod String?
  status                 ConsultationStatus @default(PENDING)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("consultations")
}

enum ConsultationStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

// Newsletter subscriptions
model Newsletter {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  interests     String? // Comma-separated interest categories
  status        NewsletterStatus @default(ACTIVE)
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?

  @@map("newsletters")
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
}

// Blog posts
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  published   Boolean  @default(false)
  publishedAt DateTime?
  category    String
  tags        String? // Comma-separated tags
  views       Int      @default(0)
  readTime    Int      // in minutes
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id])

  @@map("blog_posts")
}

// Services
model Service {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  category    String? // Comma-separated categories
  features    String? // Comma-separated features
  pricing     Json?    // Flexible pricing structure
  active      Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  quotes Quote[]

  @@map("services")
}

// Quote requests
model Quote {
  id          String   @id @default(cuid())
  name        String
  email       String
  company     String?
  phone       String?
  serviceId   String
  requirements String
  timeline    String?
  budget      String?
  status      QuoteStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  service Service @relation(fields: [serviceId], references: [id])

  @@map("quotes")
}

enum QuoteStatus {
  PENDING
  SENT
  ACCEPTED
  DECLINED
}

// Store products (for future e-commerce)
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal
  currency    String   @default("EUR")
  category    String
  tags        String? // Comma-separated tags
  images      String? // Comma-separated image URLs
  inStock     Boolean  @default(true)
  active      Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

// Analytics events
model AnalyticsEvent {
  id         String   @id @default(cuid())
  eventType  String   // 'page_view', 'form_submit', 'quote_request', etc.
  eventData  Json     // Flexible event data
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())

  @@map("analytics_events")
}

// Projects Cache for Performance
model ProjectsCache {
  id                  String   @id @default(cuid())
  zohoProjectId       String   @unique
  accountId           String
  name                String
  status              String
  progressPercentage  Int      @default(0)
  milestoneJson       Json?
  timelineJson        Json?
  budgetInfo          Json?
  teamMembers         Json?
  lastSynced          DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("projects_cache")
}

// Invoices Cache
model InvoicesCache {
  id              String   @id @default(cuid())
  zohoInvoiceId   String   @unique
  accountId       String
  invoiceNumber   String
  status          String
  totalAmount     Decimal
  amountDue       Decimal
  dueDate         DateTime?
  paymentUrl      String?
  pdfUrl          String?
  lastSynced      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("invoices_cache")
}

// Comprehensive Audit Log
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // login, view_project, download_file, etc.
  entity      String   // project, invoice, file, etc.
  entityId    String?
  meta        Json?    // Additional context data
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  timestamp   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id])
  
  @@map("audit_log")
}

// Notifications System
model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // project_update, invoice_due, file_uploaded, etc.
  title       String
  message     String
  actionUrl   String?  // Link to relevant page
  read        Boolean  @default(false)
  emailSent   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("notifications")
}

// File Metadata Enhancement
model FileMetadata {
  id                String   @id @default(cuid())
  zohoFileId        String?  @unique
  projectId         String?  // Link to projects_cache
  accountId         String
  filename          String
  originalFilename  String
  fileSize          BigInt
  mimeType          String
  filePath          String   // S3 or WorkDrive path
  accessLevel       String   @default("project") // project, account, public
  uploadedBy        String?
  createdAt         DateTime @default(now())
  
  @@map("file_metadata")
}
// Security Configuration
// Ensure your DATABASE_URL includes SSL parameters:
// postgresql://user:pass@host:5432/db?sslmode=require&sslcert=client-cert.pem&sslkey=client-key.pem&sslrootcert=ca-cert.pem

// For production, always use SSL connections
// For development, use sslmode=require at minimum